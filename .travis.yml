language: java

env:
  global:
  - CLOUDSDK_CORE_DISABLE_PROMPTS=1

sudo: false

addons:
  hosts:
    - db

services:
  - docker

install:
  - docker build -t database db/.
  - docker run --rm -d -e MYSQL_ROOT_PASSWORD=example -p 33060:3306 database
  - mvn install -DskipTests=true -Dmaven.javadoc.skip=true -B -V

before_script:
  - mvn clean

jobs:
  include:
    - stage: unit tests
      install: skip
      jdk: oraclejdk11
      script: mvn test -Dtest=com.napier.sem.mytest
    - stage: integration tests
      jdk: oraclejdk11
      script: echo "Integration Tests"
    - stage: GitHub Release
      install: skip
      jdk: oraclejdk11
      script:
      - echo "Deploying to GitHub Releases"
      - mvn package -DskipTests=true -Dmaven.javadoc.skip=true
      before_deploy:
      # Set up git user name and tag this commit
      - git config --local user.name "iainmclachlan"
      - git config --local user.email "40406168@live.napier.ac.uk"
      # Create temporary tag from date and Git log.
      - export TRAVIS_TAG=${TRAVIS_TAG:-$(date +'%Y-%m-%d')-$(git log --format=%h -1)}
      # Set tag
      - git tag $TRAVIS_TAG
      deploy:
        provider: releases
        api_key: $GITHUB_OAUTH_TOKEN
        # Copy built JAR file.  JAR built in $TRAVIS_BUILD_DIR/
        file: $TRAVIS_BUILD_DIR/target/seMethodsGroup11.jar
        skip_cleanup: true
  - stage: Google Cloud Deploy
    install: skip
    jdk: oraclejdk11
    before_script:
    # Check if Google Cloud SDK is installed.
    - if [ ! -d ${HOME}/google-cloud-sdk ]; then curl https://sdk.cloud.google.com | bash> /dev/null; fi
    - source $HOME/google-cloud-sdk/path.bash.inc
    # Install Kubernetes control to manage containers
    - gcloud components install kubectl
    - gcloud version
    # Login to our Google Cloud Account using credentials file
    - gcloud auth activate-service-account --key-file client-secret.json
    script:
    # Set the project we will work in.
    - gcloud config set project semethodsgroup11
    # Set the zone to work in.
    - gcloud config set compute/zone europe-west2-b
    # Assign project ID to a variable to make life easier
    - export PROJECT_ID="$(gcloud config get-value project -q)"
    # Authenticate against Google's Docker image manager..
    - gcloud auth configure-docker
    # Build the database image.
    - docker build -t gcr.io/$semethodsgroup11/db db/.
    # Push the database image.
    - docker push gcr.io/$semethodsgroup11/db
    # Create a container cluster.  We only need one node.
    - gcloud container clusters create hr-cluster --num-nodes=1
    # Tell kubernetes to run the built database image, opening port 3306
    - kubectl run hr --image=gcr.io/$semethodsgroup11/db --port 3306
    # Expose the cluster to the Internet, mapping external port 3306 to internal port 3306.
    - kubectl expose deployment hr --port=3306 --target-port=3306 --type=LoadBalancer

stages:
  - unit tests
  - integration tests
  - name: GitHub Release
    if: branch = master
  - name: Google Cloud Deploy
  if: branch = master


